A device can be an MCU-based hardware (e.g. NodeMCU, Arduino, Raspberry Pi, etc), a finished physical product like a Smart Air Conditioner, or a virtual service that sends data to Blynk.Cloud using REST API.

Blynk can connect your device to the Internet using WiFi, cellular or Ethernet connectivity.

https://docs.blynk.io/en/concepts/device

Device Template

Device configurations are stored in something we call Device Template.

Each device starts from a template, which makes it easy to work with multiple devices that perform similar functions.

For example, you can create a Temperature Sensor Template and reuse it for all similar sensors in your house.
https://docs.blynk.io/en/concepts/device-template

Each Template consists of:
Datastreams - channels to transfer data from/to device
Mobile app UI
Web Dashboard UI
Notifications

When you update a template, the changes will be applied to all devices created from this template. How cool is that!

https://docs.blynk.io/en/getting-started/template-quick-setup



In raspberry pi terminal:

Run:
git clone https://github.com/vshymanskyy/blynk-library-python.git

Code:

import BlynkLib
import RPi.GPIO as GPIO
from BlynkTimer import BlynkTimer

#define BLYNK_TEMPLATE_ID "TMPL3DFgrmbgE"
#define BLYNK_TEMPLATE_NAME "SmartSwitchBoard"
#define BLYNK_AUTH_TOKEN "3oA4bcJSg0VMILPumwV42WUg7lFbT-SL"

led1 = 18
led2 = 19
GPIO.setmode(GPIO.BCM)
GPIO.setup(led1, GPIO.OUT)
GPIO.setup(led2, GPIO.OUT)

x = 20
# Initialize Blynk
blynk = BlynkLib.Blynk(BLYNK_AUTH_TOKEN)

# Led control through V0 virtual pin
@blynk.on("V0")
def v0_write_handler(value):
#    global led_switch
    if int(value[0]) is not 0:
        GPIO.output(led1, GPIO.HIGH)
        print('LED1 HIGH')
    else:
        GPIO.output(led1, GPIO.LOW)
        print('LED1 LOW')

# Led control through V0 virtual pin
@blynk.on("V1")
def v1_write_handler(value):
#    global led_switch
    if int(value[0]) is not 0:
        GPIO.output(led2, GPIO.HIGH)
        print('LED2 HIGH')
    else:
        GPIO.output(led2, GPIO.LOW)
        print('LED2 LOW')

#function to sync the data from virtual pins
@blynk.on("connected")
def blynk_connected():
    print("Raspberry Pi Connected to New Blynk") 

while True:
    blynk.run()
